<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.1.6">Jekyll</generator><link href="http://127.0.0.1:4000//feed.xml" rel="self" type="application/atom+xml" /><link href="http://127.0.0.1:4000//" rel="alternate" type="text/html" /><updated>2016-09-05T20:50:33-04:00</updated><id>http://127.0.0.1:4000//</id><title>Glen Cooney</title><subtitle>Welcome to my official portfolio site</subtitle><entry><title>The Road Ahead</title><link href="http://127.0.0.1:4000//road_ahead/" rel="alternate" type="text/html" title="The Road Ahead" /><published>2016-07-27T00:00:00-04:00</published><updated>2016-07-27T00:00:00-04:00</updated><id>http://127.0.0.1:4000//road_ahead</id><content type="html" xml:base="http://127.0.0.1:4000//road_ahead/">&lt;h1 id=&quot;where-to-go-from-here&quot;&gt;Where To Go From Here?&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;With Bloc finished, I look toward the future of where I want to go. With a number of ideas on my docket, I hope to expand my horizons on multiple fronts, exploring my various interests while building skills to create ever more ambitious projects.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;career&quot;&gt;Career&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;My immediate goal is to find a job out on the West Coast, particularly Portland, preferably working on producing web services for making people’s life and work easier.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;From my time in Game Development, I developed a particular fascination with developing interfaces and interaction methods that allow users to learn my games as quickly and efficiently as possible. On &lt;a href=&quot;http://energy.gov/jobs/career-opportunities/terrachanics&quot;&gt;Terrachanics&lt;/a&gt;, I worked closely with our QA team and test volunteers to ascertain sticking points in their comprehension, and worked to come up with novel solutions to resolve those challenges.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;For Web Development, I see the same dynamic in play. Particularly with complex business software, the easier and more efficient one can make software tools, the more the user is able to accomplish. If this can further be done in a way that entertains the user, and allows them to derive pleasure from the experience, then all the better. Analyzing the psychology behind people’s interactions with software and coming up with solutions to satisfy those quirks and inferences is a topic of particular interest to me.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;side-gigs&quot;&gt;Side Gigs&lt;/h1&gt;
&lt;p&gt;## Web
&lt;em&gt;In terms of personal projects, I intend to continue to build upon DSet and Fatebook to turn them into full-featured apps. With some luck I would love to launch Fatebook as a fullscale platform for aspiring writers and game developers to share and play each other’s adventures.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;games&quot;&gt;Games&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;I fully intend to continue to build games on the side as well. I have been working on a board game called “Rise of the Scion,” a card-based skirmish game combining the card comboing of Dominion with tactical positioning of games like Chess. I hope to playtest further once I have myself established in my new workplace. I am also interested in exploring the depths of HTML5 game development, perhaps even to create a digital version of my game.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I also intend to port a game I started in Flash called “Love Man: Fallen Love”, a horizontal scrolling shooter where you play as Eros (aka Cupid) fighting against the enemies of love. Think if Cupid looked like Viewtiful Joe and had the intimidating presence of Kratos and you have an idea of what I’m going for.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;social-sciences&quot;&gt;Social Sciences&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Finally, I have been planning to get a youtube channel off the ground called “Pluralisys.” From watching shows like the “Rubin Report” I have become drawn to the contentious debates of the day, such as those relating to Islam, Freedom of Speech, and Trigger Warnings. Rather than fan the flames on either side, I instead want to do a meta-analysis to explore the thought process behind both sides of seemingly intractable arguments, in the hopes that some solutions can be uncovered to break the stalemate.&lt;/em&gt;&lt;/p&gt;</content><category term="Blog" /><category term="WebDev" /><category term="Life" /><summary>My plans for the upcoming years</summary></entry><entry><title>Discovering my Inner Developer</title><link href="http://127.0.0.1:4000//challenges/" rel="alternate" type="text/html" title="Discovering my Inner Developer" /><published>2016-07-27T00:00:00-04:00</published><updated>2016-07-27T00:00:00-04:00</updated><id>http://127.0.0.1:4000//challenges</id><content type="html" xml:base="http://127.0.0.1:4000//challenges/">&lt;h1 id=&quot;walking-the-bumpy-road&quot;&gt;Walking the Bumpy Road&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;I have always been a romantic at heart. I didn’t want to just be good, I wanted to be the best, to make a mark on the world. I put a lot of passion into everything I do. Yet in spite of my passion and the praise of my peers, I nonetheless found myself in a 5 year rut where it seemed everything was going wrong.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I have lived through the death of my Grandfather, toward whom I felt guilty I did not know better. I watched my father descend into substance abuse, not knowing if he or his medications were to blame. I came impossibly close on multiple occasions to getting the job of my dreams, only to have it snatched away. I poured my blood, sweat, an tears into a massive gaming project, only to have it never see the light of day. For years life felt hopeless, and in spite of my best efforts, only seemed to get worse.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Yet I do not see these as wasted years, a tragedy to be cast off and forgotten. For though it was painful, the lessons I learned far outweigh anything I lost out on, and my future is brighter for it. More personally, I worried for my mother, whose life was in dire straights as she pursued divorce.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;the-gaming-years&quot;&gt;The Gaming Years&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Where does Wed Dev fit into this picture? It lies at the heart of me discovering who I really was, and weighing the costs and benefits of the career paths before me. I spent many years honing my skills as a game designer, even heading up my own team to make &lt;a href=&quot;http://energy.gov/jobs/career-opportunities/terrachanics&quot;&gt;Terrachanics&lt;/a&gt; for the Department of Energy. I came extraordinarily close (twice!) to getting into the &lt;a href=&quot;https://moody.utexas.edu/gaming-academy&quot;&gt;Denius-Sams Gaming Academy&lt;/a&gt;, which only accepts 20 students a year. At the very least, I knew I had the skills to succeed in the game industry.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Yet as the years went on, doubts began to creep in. I saw classmates get into jobs at companies making mediocre games. I read articles about companies making excellent games that no one bought. The jobs that interested me were few and far between, and far too many were just to create shovelware to make a quick buck.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;greener-pastures&quot;&gt;Greener Pastures&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;I began to consider alternatives, perhaps to go into programming. Having coded for about 12 years in a hobbyist capacity, I thought maybe I could do programming. Sure enough, after some digging I learned about the emergence of Hacker Schools, and among them &lt;a href=&quot;http://bloc.io&quot;&gt;Bloc&lt;/a&gt;, which I ultimately enrolled in.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Yet still I wrestled with doubts. Am I giving up on my dreams? Would I even like Web Development? I will admit, I carried these fears into my first month or so of Bloc. Over time, however, they began to fade away, as I found myself pulled into the world of software development.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I have always had a fascination with problem solving and the building of systems. As a Game Designer, I specialized in the design of mechanics and rules, particularly for strategy games that challenged players to combine various effects and units in novel and interesting ways. When programming, it felt like playing that very type of game, carefully using the tools in front of me to solve complex challenges.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;the-epiphany&quot;&gt;The Epiphany&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Until recently I had always considered programming a means to an end, a tool to actualize my creative ambitions, and always thought of myself as a day-job creative. Yet when working on Terrachanics, I found that while solving creating problems did give me the occasional thrill, I was never so absorbed as I was when I was actually coding our prototype. Reflecting on this I find myself questioning who I really was: am I the wide-eyed creative, looking to open the eyes of the world? Or the calculating technical type, intent on tackling the world’s most complex problems?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;In the end, I don’t feel I need to choose. I can be both a game and web developer, creative and technical. I realize that the kind of games I want to make are risky, maybe not even commercially viable. As a web dev I can tackle challenges and grow my skills to create new apps and solve complex problems, and make enough money to mess around in the world of games. The two scratch different iches for sure, but with the money and job security of a web dev career, it opens more doors for me to explore my creative interests and get a bigger slice of the life fate denied to me in my rougher years.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I cannot say where life will take me, but in a way my realization is liberating. Being a Game Designer does not have to be what defines me, but one facet among many. As a Web Developer, I can grow my programming skills to bring my ideas into reality.&lt;/em&gt;&lt;/p&gt;</content><category term="Blog" /><category term="WebDev" /><category term="Life" /><summary>My journey of self-discovery in the face of misfortune, doubt, and aspiration.</summary></entry><entry><title>The Bloc Experience</title><link href="http://127.0.0.1:4000//blocXP/" rel="alternate" type="text/html" title="The Bloc Experience" /><published>2016-07-27T00:00:00-04:00</published><updated>2016-07-27T00:00:00-04:00</updated><id>http://127.0.0.1:4000//blocXP</id><content type="html" xml:base="http://127.0.0.1:4000//blocXP/">&lt;h1 id=&quot;new-kid-on-the-bloc&quot;&gt;New Kid on the Bloc&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Back in October of 2015, I made the choice to dive into the world of Web Development. With the promise of greater job opportunities, better pay, and the chance to make a living solving problems, it seemed like a great fit for my skills.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I came into the program with about 12 years of coding experience under my belt. While it sounds like a lot, to me I never quite felt like a professional. I was eager to find a program that would help me hone my skills to a professional level.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;first-impressions&quot;&gt;First Impressions&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;The things that stood out to me about Bloc among other hacker schools was that it was remote, had a flexible schedule, and one-on-one mentorship. The last one I felt was especially crucial, as the last few bumpy years took their toll on my confidence. I wanted to be sure I was working with a professional that knew the trade and could tell me where I stood against my peers.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;backend-with-rails&quot;&gt;Backend with Rails&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Learning Rails was perhaps the most challenging part of the course. In an odd way, I felt my past experience with coding was in fact a hindrance, as Ruby’s loose syntax and implied parentheses and brackets made code hard to decypher. Over time I got used to it, though, and came to enjoy the ease and expediency the terse syntax afforded.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Model associations were perhaps the most frustrating skill to grasp. It is a concept that seems both simple to understand, yet hard to set up correctly without a guide, and I found myself on multiple projects scratching my head on how best to structure my associations for my database. Now that I’m done I feel a bit more confident with it, but I know I could still use more practice before I could call myself a master.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;frontend-with-angular&quot;&gt;Frontend with Angular&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Javascript and Angular, by contrast, were much easier. Not only was the syntax and concepts similar to what I knew from Actionscript 3.0, but Angular’s declarative paradigm seemed right at home alongside css classes and tags.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;While Backend’s focus on search algorithms and organizing data was fun in its own right, really enjoyed creating the visual effects and interactions of Frontend work.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;the-rough-spots&quot;&gt;The Rough Spots&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;My biggest challenge going through Bloc had less to do with the material, and more to do with my life. Working a day job at a grocery store, living with a worried mother going through divorce, and wondering how we will pay all the bills certainly put a strain on my productivity. I had to learn to not only master the material, but develop coping strategies and routines to keep me on track.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;While not perfect, things like Tai Chi and weekly board game nights went a long way toward getting me through the tougher times, and the support and encouragement of my mentors helped to validate that I was on the right track.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;if-i-had-a-time-machine&quot;&gt;If I had a Time Machine…&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;While Bloc has a great curriculum, it wasn’t quite what I expected. Unlike a traditional classroom, Bloc is a constantly evolving program that is being improved and tweaked all the time. The result is that sometimes you may catch a mistake or two in the curriculum from time to time. This may not be a big deal for some people, but for someone like me who came into the program with some trepidation, it made me worry whether my money was well spent on this particular school. Having completed the program, I can assure you it certainly was.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The second unconventional thing is its approach to learning. In previous Computer Science courses I took, I was taught programming much like one would learn math - learning basic skills that built off one another until you reach advanced concepts. This is certainly done in the early assignments, but upon entering the first Foundation project, they throw you into the deep end. You are guided each step of the way, of course, but with Rails especially, you aren’t necessarily told how every single thing you implement works or what exactly it does. Coming from a “I need to know about everything” mindset can make this leg of the course seem overwhelming.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;overall-impressions&quot;&gt;Overall Impressions&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;My only gripe with Bloc is that I wasn’t always sure where I stood in terms of my skills relative to other aspiring Junior Developers. My mentors assured me that I was among one of their top students, but I was hoping to see something more tangible to make me really believe it. Of course, given that I had been through some rough years and was more insecure going in, take that with a grain of salt. Overall, I am happy to be a part of the grand experiment of online Wed Development education.&lt;/em&gt;&lt;/p&gt;</content><category term="Blog" /><category term="WebDev" /><summary>My review of my experience of Bloc.</summary></entry><entry><title>Fatebook</title><link href="http://127.0.0.1:4000//Fatebook/" rel="alternate" type="text/html" title="Fatebook" /><published>2016-07-26T00:00:00-04:00</published><updated>2016-07-26T00:00:00-04:00</updated><id>http://127.0.0.1:4000//Fatebook</id><content type="html" xml:base="http://127.0.0.1:4000//Fatebook/">&lt;!-- NOTE standardize code samples by including file name in bold --&gt;

&lt;h1 id=&quot;the-project&quot;&gt;The Project&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Fatebook is a social platform for creating and sharing interactive, choose-your-own-adventure stories. As an Angular on Rails application, it is the culmination of my Rails and Angular studies through Bloc.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;tools&quot;&gt;Tools&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://rubyonrails.org/&quot;&gt;Rails&lt;/a&gt;,
&lt;a href=&quot;https://www.javascript.com/&quot;&gt;Javascript&lt;/a&gt;, &lt;a href=&quot;https://angularjs.org/&quot;&gt;Angular&lt;/a&gt;, &lt;a href=&quot;https://github.com/angular-ui/ui-router&quot;&gt;UI-Router&lt;/a&gt;,  &lt;a href=&quot;https://docs.angularjs.org/api/ngCookies&quot;&gt;ngCookies&lt;/a&gt;,
&lt;a href=&quot;https://github.com/rails-api/active_model_serializers&quot;&gt;ActiveModelSerializers&lt;/a&gt;, &lt;a href=&quot;http://underscorejs.org/&quot;&gt;Underscore.js&lt;/a&gt;,
&lt;a href=&quot;http://ckeditor.com/&quot;&gt;ckEditor&lt;/a&gt;, &lt;a href=&quot;http://getbootstrap.com/&quot;&gt;Bootstrap&lt;/a&gt;, &lt;a href=&quot;https://atom.io/&quot;&gt;Atom&lt;/a&gt;, &lt;a href=&quot;http://www.ubuntu.com/&quot;&gt;Ubuntu&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;the-app&quot;&gt;The App&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Upon entering the app, users are able to play through any existing published story. When playing through a story, they will see a paragraph or two of text, followed my a set of options. Each option will take the user down a new story thread. Users may select these chooses by clicking or pressing the corresponding number on their keyboard.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Should a user want to create their own story, they must log in and select “create story”. From here they can provide a title and description of their story. Upon creating the story, the first page is automatically generated. After populating the content of the page, they can click “create option” to define a new option players can choose. They can then click the “Edit Page” button for that new option to go directly to a page generated for that option.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;At any time, users can use the buttons along the top to navigate to the parent page, parent story, or view sibling stories on the same level of the story tree. Additionally, users may view the story tree at the bottom of the page, allowing them to easily traverse their story and identify which story threads remain unfinished.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;the-process&quot;&gt;The Process&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;While planning the project, I defined two main states: Play mode, where a user is playing through someone’s story, and Edit mode, where a user is creating or editing one of their own stories.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I began with the Play state, starting initially as a pure Angular application. I created a system where a &lt;code class=&quot;highlighter-rouge&quot;&gt;Story&lt;/code&gt; object would contain an array of &lt;code class=&quot;highlighter-rouge&quot;&gt;Pages&lt;/code&gt;. Each &lt;code class=&quot;highlighter-rouge&quot;&gt;Page&lt;/code&gt; would contain an array of &lt;code class=&quot;highlighter-rouge&quot;&gt;choices&lt;/code&gt;, which would be an object hash with the attributes of &lt;code class=&quot;highlighter-rouge&quot;&gt;text&lt;/code&gt; for the text of the choice the users sees, and &lt;code class=&quot;highlighter-rouge&quot;&gt;dest&lt;/code&gt; for the ID of the destination page.&lt;/em&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Page&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentPage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

   &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;summary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;summary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;choices&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;choices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Displayed to user&lt;/span&gt;

     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

   &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createChildPages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;choices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;choices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
         &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newPageID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getBranchID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
         &lt;span class=&quot;nx&quot;&gt;createPlaceholderPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newPageID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

         &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;choices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newPageID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

   &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;To make nested seeding of page data easier, I used a page ID system I came up with for a short branching story I wrote years ago called Doors (which I ended up using as the example story for my app.) The naming convention consisted of alternating numbers and letters to indicate the number of levels down through the story a user had navigated. For example, the first page would have a &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt; of “1”, with child pages of “1A” and “1B”. This could be chained indefinitely, so a page like “1A2B2” would be the child of page “1A2B” and sibling to “1A2B1”.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt; was auto-generated using the following code (annotations added as comments):&lt;/em&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getBranchID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;idString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lastChar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;idString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;idString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//Uses a regular expression to test if last character&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// of parent pageID is a number or letter&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/^&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\d&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;+$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lastChar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)){&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;indexToAlpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;Using this &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt; system and the functions built into the &lt;code class=&quot;highlighter-rouge&quot;&gt;Page&lt;/code&gt; object, I set up a system for easily populating a test array of pages. To do this, I first created a dummy first page, then used an &lt;code class=&quot;highlighter-rouge&quot;&gt;editPage&lt;/code&gt; function I created to create an repeatable format I could use to populate all pages.&lt;/em&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;StoryNavSrv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;editPage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getPageFromID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createChildPages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;warn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Attempt to edit with invalid page id &quot;&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;&quot; SKIPPING&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;createPlaceholderPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;StoryNavSrv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentPage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;StoryNavSrv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentStory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;StoryNavSrv&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;editPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;1&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Initial page&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;summary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;First page&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;You see two doors. Which do you choose?&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;choices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Left door&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Right door&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;StoryNavSrv&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;editPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;1A&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Left door&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;summary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;First page&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;You entered the LEFT door.&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;StoryNavSrv&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;editPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;1B&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Left door&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;summary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;First page&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;You entered the RIGHT door.&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;choices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Or did I?&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;No I didn\&#39;t&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;With a working story navigation system working, I decided to add in keyboard controls as well.&lt;/em&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;keyup&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;StoryNavSrv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentPage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;StoryNavSrv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;choices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;choiceIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keyCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;49&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;StoryNavSrv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;choice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;choices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;choiceIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;choice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;choice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;With a working frontend implementation, I then moved on to add a Rails backend. Following a guide I found on youtube, I was able to get Angular to communicate with Rails, though it was a tricky process. I had to do some research to find the gems I required, namely &lt;code class=&quot;highlighter-rouge&quot;&gt;angular-rails-templates&lt;/code&gt; to enable my Angular templates to be used in the Rails asset pipeline.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;My Rails backend became an API to store and pass data to Angular via the UI-Router service. It accomplished this by passing returning JSON to my Frontend, after being processed by the appropriate &lt;code class=&quot;highlighter-rouge&quot;&gt;ActiveModelSerializer&lt;/code&gt; to ensure the relevant attributes were properly passed.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;It took me a little while to make sense of creating these accessor services, but eventually it clicked and made sense how the urls they used corresponded to the routes created by Rails.&lt;/em&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PageSrv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/pages/:id.json&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;@id&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;GET&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;isArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;POST&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;GET&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;PUT&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;DELETE&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;GET&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;/pages/get_first_page/:story_id&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;fatebook&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;factory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;PageSrv&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;$resource&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PageSrv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;I hit some friction coming up with the best approach for setting up the &lt;code class=&quot;highlighter-rouge&quot;&gt;ActiveRecord&lt;/code&gt; associations between Stories, Pages, and child Pages. My initial thought was to create a &lt;code class=&quot;highlighter-rouge&quot;&gt;has_many :through&lt;/code&gt; relationship, using a &lt;code class=&quot;highlighter-rouge&quot;&gt;branch&lt;/code&gt; model to link a parent page to a destination page. This created an odd situation where each page &lt;code class=&quot;highlighter-rouge&quot;&gt;has_many&lt;/code&gt; pages and &lt;code class=&quot;highlighter-rouge&quot;&gt;belongs_to&lt;/code&gt; a parent page, which just wasn’t working right.&lt;/em&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Page&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;belongs_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:story&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:branches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:class_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Page&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;foreign_key: :parent_id&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;belongs_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:parent_page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:class_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Page&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;foreign_key: :parent_id&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;After some thought and consultation with my mentor, I realized there was a better approach. Rather than having pages be linked to each other directly, I could instead define a &lt;code class=&quot;highlighter-rouge&quot;&gt;Branch&lt;/code&gt; join table to link pages together. The result was a much cleaner association.&lt;/em&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Page&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;belongs_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:story&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:branches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;foreign_key: :parent_id&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Branch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;belongs_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:story&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;belongs_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:parent_page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:class_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Page&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;foreign_key: :parent_id&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;belongs_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:destination_page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:class_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Page&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;foreign_key: :destination_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;dependent: :destroy&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;With the associations created, I set to out to seed the database with a full, branching story I wrote back in 2007. Using the naming conventions I set up before, I was able to fairly easily import my story into the database page by page. While no longer functionally required, I used a similar naming convention for &lt;code class=&quot;highlighter-rouge&quot;&gt;Pages&lt;/code&gt; to keep track of which stories were connected to each other, using a &lt;code class=&quot;highlighter-rouge&quot;&gt;create_branch&lt;/code&gt; method to link them together in the database.&lt;/em&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create_branch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;branch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;destination_id: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;choice_text: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;story&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;story&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;branches&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;branch&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;---&lt;/span&gt;

&lt;span class=&quot;vi&quot;&gt;@A1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;text: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Super Mega Awesome Soda&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;id: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;story&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;title: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;The Taste of Super Mega Awesome Soda&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;content: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;The moment the delectable fluid touches your tongue you are overwhelmed
       with a magical flavor sensation that makes every nerve in your body radiate with blissful
        satisfaction. After savoring the flavor you open you eyes and you are staring down a hideous
         man-beast twice your size and thrice your width. He doesn&#39;t look too happy. What do you say?&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;create_branch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@A1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;For each &lt;code class=&quot;highlighter-rouge&quot;&gt;Page&lt;/code&gt;, I created a hash containing the choice text and reference to the page ID (combining the page initialization and id getter into a single statement for brevity). &lt;code class=&quot;highlighter-rouge&quot;&gt;create_branch&lt;/code&gt; would  then take this new object and use it to define the child page for the parent page via a branch.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;On the parent page (from the second parameter), a new branch would be created, passing in the choice text (&lt;code class=&quot;highlighter-rouge&quot;&gt;choice_text&lt;/code&gt;) of the child object as well as the id of the associated child page (&lt;code class=&quot;highlighter-rouge&quot;&gt;destination_id&lt;/code&gt;). To ensure all branches are associated with the correct &lt;code class=&quot;highlighter-rouge&quot;&gt;Story&lt;/code&gt;, the new branch is associated with the story’s branch collection via the shovel operator.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Returning to the view, I wanted to ensure the author was able to easily navigate through the pages of their story. I decided to add buttons to allow a user to quickly navigate to the parent page, parent story, and sibling stories. To do this, I had to create a system to ensure any given page rendered routed to the appropriate page.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;To do this, I created a few additional routes for my &lt;code class=&quot;highlighter-rouge&quot;&gt;BranchSrv&lt;/code&gt; service, integrated with the Rails &lt;code class=&quot;highlighter-rouge&quot;&gt;BranchesController&lt;/code&gt;:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PageEditCtrl.js&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;BranchSrv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;findPageByDestination&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fromChoiceText&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;choice_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;initParentPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parent_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;BranchSrv.js&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BranchSrv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/branches/find_by_destination/:id&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,{},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;findPageByDestination&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;GET&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;GET&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;isArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/branches&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;DELETE&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/branches/:id&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;branches_controller.rb&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;find_by_destination&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@branch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Branch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;destination_id: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;json: &lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@branch&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;Getting sibling pages was comparably simpler, as that only involved looping through the branches of the parent page.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PageEditCtrl.js&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initSiblingPages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;siblingPages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;branch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;PageSrv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;branch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;destination_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;siblingPages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;While navigation between pages was functional, I still felt the linear display of pages within a story wasn’t visually appealing or useful to users. Thus I set out to create a tree view that would render out all the pages, visually displaying the various story paths a player could go down.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;To do this, I used a recursive function to populate a multidimensional &lt;code class=&quot;highlighter-rouge&quot;&gt;tree&lt;/code&gt; array, then a recursive Angular template to render it out.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;StoryEditCtrl.js&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getTree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;branches&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parent_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;branch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;branch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;destination_page&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getTree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;branch_tree.html.erb&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-repeat=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;data in tree&#39;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-include=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&#39;tree_element_renderer.html&#39;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;tree_element_renderer.html.erb&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;span&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;btn btn-warning&#39;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ui-sref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;edit_page({story_id: currentStory.id, page_id: data.page.id } )&#39;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Edit&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;btn btn-danger&#39;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-hide=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;data.page.complete&#39;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Incomplete&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-repeat=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;data in data.children&#39;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-include=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&#39;tree_element_renderer.html&#39;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;With these navigation features implemented, I moved on to adding a User system. For the sake of the project, I kept the user system fairly simple, allowing easy signup and login without special authorization or authentication. This was done to constrain the focus of my project to its core features, though it is an area I intend to revist in the future.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The User system primarily served as a means to associate stories with their authors. Whenever a User creates a Story, by default the story is not published. When a User clicks the button to save their story as published (via their &lt;code class=&quot;highlighter-rouge&quot;&gt;published&lt;/code&gt; boolean attribute), then it will be visible to all Users. By the same token, &lt;code class=&quot;highlighter-rouge&quot;&gt;Pages&lt;/code&gt; can be saved as finished or unfinished, and a Story cannot be published until all its child pages are marked as finished (via their &lt;code class=&quot;highlighter-rouge&quot;&gt;finished&lt;/code&gt; boolean attribute).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;With these features implemented, all that remained was styling, cookies, and integration of ckEditor for text editing, which were comparably straightforward.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;the-outcome&quot;&gt;The Outcome&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;As intended, this proved to be my most challenging and sophisticated project to date. While I felt I had a solid handle on Angular going into the project, integrating it with a Rails backend took some effort and research to tailor my code to work with it. Once I understood how &lt;code class=&quot;highlighter-rouge&quot;&gt;ngResource&lt;/code&gt; queried the routes generated by Rails, the connection clicked, and it became much easier to work with.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The best way to set up my &lt;code class=&quot;highlighter-rouge&quot;&gt;Page&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Branch&lt;/code&gt; associations was something I agonized over for a while, but ultimately what cemented my decision was the question of flexibility. If a page directly knew its parents and children, then that would mean the path to any given page would be fixed. Hypothetically, a user may want to have certain choices lead back to an existing page, and I wanted to be able to support that. In its present form, my app has no easy way for players to do this, but I made the decision with an eye for where I want to take the app in its future incarnations.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The final challenge was deployment to Heroku. When my page failed to load, my first thought was that it wasn’t properly loading the dependencies needed to initialize Angular properly. I tried switching from npm to bower, and using RequireJS for loading dependencies instead, but ultimately it came down to an error with minifying the code. Once that was disabled, the page worked perfectly.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;the-future&quot;&gt;The Future&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;As with &lt;a href=&quot;/dset/&quot;&gt;DSet&lt;/a&gt;, I created this app as a proof of concept of a larger app I intend to build. My ultimate goal is to create a platform for users to create and share not only choose-your-own-adventure stories, but text-based games complete with dice rolling mechanics, inventory, and even multiplayer. This app marks the first step down that road, laying out the core functionality for future development.&lt;/em&gt;&lt;/p&gt;</content><category term="Bloc" /><category term="Frontend" /><category term="Backend" /><category term="Fullstack" /><category term="Angular" /><category term="Rails" /><category term="Capstone" /><summary>App for creating and sharing interactive stories</summary></entry><entry><title>Bloc Jams</title><link href="http://127.0.0.1:4000//BlocJams/" rel="alternate" type="text/html" title="Bloc Jams" /><published>2016-07-24T00:00:00-04:00</published><updated>2016-07-24T00:00:00-04:00</updated><id>http://127.0.0.1:4000//BlocJams</id><content type="html" xml:base="http://127.0.0.1:4000//BlocJams/">&lt;h1 id=&quot;jamming-out&quot;&gt;Jamming Out&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Bloc Jams is a music player app utilizing templates, responsive styling, and jQuery DOM manipulation. It was designed by Bloc as an in-depth tutorial to Frontend Web Development. It was designed in two parts - one focusing on Javascript and jQuery, and the other on Angular.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;tools&quot;&gt;Tools&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.javascript.com/&quot;&gt;Javascript&lt;/a&gt;, &lt;a href=&quot;https://angularjs.org/&quot;&gt;Angular&lt;/a&gt;, &lt;a href=&quot;https://github.com/angular-ui/ui-router&quot;&gt;UI-Router&lt;/a&gt;, &lt;a href=&quot;https://jquery.com/&quot;&gt;jQuery&lt;/a&gt;, &lt;a href=&quot;http://gruntjs.com/&quot;&gt;Grunt&lt;/a&gt;, &lt;a href=&quot;http://buzz.jaysalvat.com/&quot;&gt;Buzz&lt;/a&gt;, &lt;a href=&quot;http://getbootstrap.com/&quot;&gt;Bootstrap&lt;/a&gt;, &lt;a href=&quot;http://brackets.io/&quot;&gt;Brackets&lt;/a&gt;, &lt;a href=&quot;http://www.ubuntu.com/&quot;&gt;Ubuntu&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;starting-out&quot;&gt;Starting Out&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Having just completed my Backend track for Bloc, I came into the Frontend side with a better understanding of web web development paradigms. Compared to Ruby, Javascript was much closer to languages I had worked with in the past, namely Actionscript 3.0.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;While I had dabbled in some styling and JS scripting in Backend, it was with this project that I really got my feet wet with it.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;overview&quot;&gt;Overview&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;In Bloc Jams, users may view an index of albums, view the songs on that item, and then play any of the songs within the album. It features additional flourishes like icon fade-in when the user scrolls down the landing page and a music player bar docked at the bottom of the album view.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;the-process&quot;&gt;The Process&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;As a Frontend project, work began first on creating a basic view. Outside of the familiar html formatting assisted by Bootstrap, I was introduced to responsive styling to allow my page to dynamically adjust based on the size of the viewing device. This was accomplished through media queries applied to my CSS classes.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;[CSS example]&lt;/p&gt;

&lt;p&gt;&lt;em&gt;With a basic landing page set up, I moved on to the Collection view, which contained a grid of albums users can select from. To properly arrange the albums, I made use of Bootstrap’s grid system to align the dynamically generated list of albums.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;With that done, I moved on to the Album view, where the bulk of visual effects were implemented. The first effect was to have a play button replace the track number when a user hovers over the appropriate row. This was accomplished using psuedoclass selectors in CSS.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;[CSS hover]&lt;/p&gt;

&lt;p&gt;&lt;em&gt;For the play button, the desired behavior was to have it remain in its “pause” state while a user hovers over other song rows, and upon clicking a new one, it should dismiss the previous play/pause button. To accomplish this, some Javascript logic was required.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;[JS for hover/click]&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The next step involved a refactor of my event listeners from straight Javascript to jQuery. This streamlined a lot of the code and allowed event listeners to be moved to the song row objects themselves, rather than in a generic &lt;code class=&quot;highlighter-rouge&quot;&gt;document.ready&lt;/code&gt; function.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Finally, the Buzz library was implemented to allow for audio playback upon selecting a song. Play and pause functionality were integrated in with the existing button behaviors, and observer functions were used to sync volume and current song time with their appropriate seek bars.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;round-2&quot;&gt;Round 2&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Next came a bigger refactor - migrating my code to use Angular. I converted my pages into templates, and set up UI-Router to turn them into states. This allowed my app to become a Single Page Application, and thus much faster and responsive.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;jQuery DOM manipulation and listeners were replaced with their equivalent Angular directives. Angular controllers took over for my JS scripts to more formally serve and render data onto my views. Album data was moved to a &lt;code class=&quot;highlighter-rouge&quot;&gt;Fixtures&lt;/code&gt; service for my &lt;code class=&quot;highlighter-rouge&quot;&gt;AlbumController&lt;/code&gt; to pull from.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Actions related to song playback were moved into a &lt;code class=&quot;highlighter-rouge&quot;&gt;SongPlayer&lt;/code&gt; service, which interacted with both the Album and Player Bar controllers.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;When it came to the Next and Previous buttons, I wanted to ensure that the list looped continuously as the user moved up or down the list, so I created my own utility function for looping array incrementation.&lt;/em&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Utilities&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Utilities&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;Utilities&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loopIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;forward&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;increment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;forward&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;forward&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;newIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forward&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;newIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;newIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Utilities&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;blocJams&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;factory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Utilities&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Utilities&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;Refactoring the Seek Bar involved creating a custom directive to update the name and track times when a new song starts playing. To sync up the appearance of the playback seek bar with the audio, I used the seekbar directive’s &lt;code class=&quot;highlighter-rouge&quot;&gt;link&lt;/code&gt; attribute to produce functions for updating its bar and thumb. To ensure this was updated in realtime, an &lt;code class=&quot;highlighter-rouge&quot;&gt;$observe&lt;/code&gt; function is used to continuously call those functions as music is played.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Finally, a custom Angular filter is used to format the time display for playback.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;takeaways&quot;&gt;Takeaways&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;While there was an initial learning curve, I took to Angular much quicker than I did to Rails. Much of its functionality was familiar to me from my days messing with Flash and AS3, so it was not too difficult to get it working. I found the manner in which Angular organizes code through directives and declarative DOM manipulation intuitive and easy to see how every piece fits together.&lt;/em&gt;&lt;/p&gt;</content><category term="Bloc" /><category term="Frontend" /><category term="Angular" /><category term="Foundation" /><summary>Music player app built in Angular.</summary></entry><entry><title>Chatterbox</title><link href="http://127.0.0.1:4000//Chatterbox/" rel="alternate" type="text/html" title="Chatterbox" /><published>2016-07-24T00:00:00-04:00</published><updated>2016-07-24T00:00:00-04:00</updated><id>http://127.0.0.1:4000//Chatterbox</id><content type="html" xml:base="http://127.0.0.1:4000//Chatterbox/">&lt;h1 id=&quot;the-project&quot;&gt;The Project&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Chatterbox is a chatroom application that updates in realtime through the use of Angular and Firebase.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;tools&quot;&gt;Tools&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.javascript.com/&quot;&gt;Javascript&lt;/a&gt;, &lt;a href=&quot;https://angularjs.org/&quot;&gt;Angular&lt;/a&gt;, &lt;a href=&quot;https://github.com/angular-ui/ui-router&quot;&gt;UI-Router&lt;/a&gt;, &lt;a href=&quot;https://jquery.com/&quot;&gt;jQuery&lt;/a&gt;, &lt;a href=&quot;https://www.firebase.google.com/&quot;&gt;Firebase&lt;/a&gt;, &lt;a href=&quot;https://github.com/firebase/angularfire&quot;&gt;AngularFire&lt;/a&gt;,
&lt;a href=&quot;http://gruntjs.com/&quot;&gt;Grunt&lt;/a&gt;, &lt;a href=&quot;https://docs.angularjs.org/api/ngCookies&quot;&gt;ngCookies&lt;/a&gt;, &lt;a href=&quot;http://getbootstrap.com/&quot;&gt;Bootstrap&lt;/a&gt;, &lt;a href=&quot;http://brackets.io/&quot;&gt;Brackets&lt;/a&gt;, &lt;a href=&quot;http://www.ubuntu.com/&quot;&gt;Ubuntu&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;the-app&quot;&gt;The App&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Upon loading the app for the first time, the user is prompted to enter a username. From there, they may click to enter any of the chatrooms listed in the left navbar to see messages for that room. Upon closing and/or reloading the page, cookies ensure the user remains logged in&lt;sup&gt;1&lt;/sup&gt; as their chosen username.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;process&quot;&gt;Process&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;The first task was to set up my Firebase database and associated service for facilitating CRUD operations. Using my &lt;code class=&quot;highlighter-rouge&quot;&gt;RoomSrv&lt;/code&gt; service, I was able to push new rooms to the database, as well as pull down an array of all available Rooms.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;To allow users to create new chat rooms, I created a button to trigger a modal input box to appear, allowing users to name and create new chat rooms. This was accomplished using UI Bootstrap’s &lt;code class=&quot;highlighter-rouge&quot;&gt;$uibModal&lt;/code&gt; service.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Upon receiving user input, an &lt;code class=&quot;highlighter-rouge&quot;&gt;$emit&lt;/code&gt; and corresponding &lt;code class=&quot;highlighter-rouge&quot;&gt;$on&lt;/code&gt; function are used to facilitate communication between the &lt;code class=&quot;highlighter-rouge&quot;&gt;ModalCtrl&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;RoomCtrl&lt;/code&gt; Controllers.&lt;/em&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ModalCtrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$uibModal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;modalInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;roomName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$emit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;createNewRoom&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;roomName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RoomCtrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RoomSrv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$cookies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;createNewRoom&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addRoom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;The next step was to allow messages to be posted in chat rooms. Upon creation, each message object was set up to be associated with the currently selected room via its &lt;code class=&quot;highlighter-rouge&quot;&gt;$id&lt;/code&gt; autogenerated by Firebase.&lt;/em&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MessageCtrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MessageSrv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$cookies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;messageContent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;MessageSrv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;messageContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;roomID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selectedRoom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;sentAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;default&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$cookies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;currentUser&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;messageContent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;chatterBox&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;MessageCtrl&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;$scope&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;MessageSrv&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;$cookies&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MessageCtrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;Retrieving the messages to render to the view involves some unorthdox syntax, which was initially confusing:&lt;/em&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;RoomSrv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getMessages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$firebaseArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firebaseRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;messages&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                                   &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;orderByChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;roomID&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                                   &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;equalTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;Understanding this statement involves looking at the return types of each function. &lt;code class=&quot;highlighter-rouge&quot;&gt;.child()&lt;/code&gt; returns a Firebase reference to the object containing all messages.  &lt;code class=&quot;highlighter-rouge&quot;&gt;orderByChild()&lt;/code&gt; returns a &lt;code class=&quot;highlighter-rouge&quot;&gt;Query&lt;/code&gt; with all messages ordered by &lt;code class=&quot;highlighter-rouge&quot;&gt;roomID&lt;/code&gt;. Finally &lt;code class=&quot;highlighter-rouge&quot;&gt;equalTo()&lt;/code&gt; filters the Query down further to only those messages with a matching &lt;code class=&quot;highlighter-rouge&quot;&gt;roomID&lt;/code&gt;. Finally &lt;code class=&quot;highlighter-rouge&quot;&gt;$firebaseArray()&lt;/code&gt; converts the final query into an array to be rendered to the View.```&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What is peculiar is that the 2nd statement seems to both reorder the array &lt;sup&gt;2&lt;/sup&gt; of results&lt;/em&gt; &lt;strong&gt;and&lt;/strong&gt; &lt;em&gt;passes a new array, with &lt;code class=&quot;highlighter-rouge&quot;&gt;equalTo()&lt;/code&gt; receiving the key to compare &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt; against. I can only assume that this was coded this way for some purpose such as optimization, but I would think retrieving queries using key/value pairs would make more sense:&lt;/em&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;firebaseRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;messages&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$firebaseArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;roomID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;Nonetheless, with the display of messages and rooms out of the way, the next step was to set up Users. Upon loading the page for the first time, users are greeted with a Modal prompt asking for a username. This username is stored in a cookie using the &lt;code class=&quot;highlighter-rouge&quot;&gt;ngCookies&lt;/code&gt; service. To make this step manditory, the code the &lt;code class=&quot;highlighter-rouge&quot;&gt;preventDefault()&lt;/code&gt; function is used to prevent the Modal from being dismissed the the input field is empty.&lt;/em&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;modal.closing&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reason&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;closed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;userName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;preventDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;Finally, I added functionality to &lt;code class=&quot;highlighter-rouge&quot;&gt;MessageCtrl&lt;/code&gt; to allow users to post new messages into chat rooms associated with their username.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;outcome&quot;&gt;Outcome&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;This was a fairly straightforward project, and for me gave me a taste having a Frontend interacting with a non-Rails backend. Tripping up on the terminology for retrieving a message was a bit confusing, but appears to be relatively common with web development, as I have discovered. Given the diversity of toolsets and the “hacks” required in order to optimize functionality for a live web app, I have come to expect some things to initially defy conventional comprehension.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;annotations&quot;&gt;Annotations&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;sup&gt;1&lt;/sup&gt; &lt;em&gt;Chatterbox uses only a rudimentary user system, not a complex system of authentication. This was done to limit the scope of the project to only its most valuable features.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;sup&gt;2&lt;/sup&gt; &lt;em&gt;Not a true Array, of course, but an object behaving as one in this context.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="Bloc" /><category term="Frontend" /><category term="Angular" /><summary>A realtime chat application</summary></entry><entry><title>DSet</title><link href="http://127.0.0.1:4000//dset/" rel="alternate" type="text/html" title="DSet" /><published>2016-07-19T00:00:00-04:00</published><updated>2016-07-19T00:00:00-04:00</updated><id>http://127.0.0.1:4000//dset</id><content type="html" xml:base="http://127.0.0.1:4000//dset/">&lt;h1 id=&quot;the-minimalist-randomizer&quot;&gt;The Minimalist Randomizer&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;DSet is an app designed to help players of Dominion set up their game based on desired criteria. Through a simple interface, users can search for cards by type, name, or cost to filter down to the set of cards desired for their game.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;tools&quot;&gt;Tools&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://rubyonrails.org/&quot;&gt;Rails&lt;/a&gt;, &lt;a href=&quot;http://rspec.info/&quot;&gt;Rspec&lt;/a&gt;, &lt;a href=&quot;https://jquery.com/&quot;&gt;jQuery&lt;/a&gt;, &lt;a href=&quot;https://api.jquery.com/category/ajax/&quot;&gt;AJAX&lt;/a&gt;, &lt;a href=&quot;https://github.com/rails/arel&quot;&gt;Arel&lt;/a&gt;, &lt;a href=&quot;http://getbootstrap.com/&quot;&gt;Bootstrap&lt;/a&gt;, &lt;a href=&quot;https://atom.io/&quot;&gt;Atom&lt;/a&gt;, &lt;a href=&quot;http://www.ubuntu.com/&quot;&gt;Ubuntu&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;about-dominion&quot;&gt;About Dominion&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Dominion is a popular deckbuilding card game by Donald X. Vaccarino. If you are not familiar with the game, the most pertinent thing to this app is how to set up a game. During a game, players spend coins to “buy” new cards from a supply in the center of the board, made up of 10 piles of 10 identical cards called “kingdom cards”. To set up a game, players use the “randomizer deck” - a deck containing one copy of each of the 25 cards in the base game. Ten of these cards are drawn at random to reveal which 10 kingdom cards will be used for that game.&lt;/em&gt;
&lt;em&gt;In the physical game, what cards are drawn are totally random, but some randomizer apps provide users with filtering criteria to control what type of cards they want. For example, if one wanted to play a game without attack cards, or had a favorite card they wanted to include, those preferences could be used to control which 10 cards will be generated.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;how-it-works&quot;&gt;How It Works&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Users are greeted with 10 face-down Dominion cards. Upon clicking “Generate Card Set” the cards will change into 10 random, unique Dominion cards. Clicking on any of these cards brings you to the “slot” view for that card.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;From here, users will first see an input box with a list of cards under “Acceptable Cards for the Slot”. If the user provides no input, then it is assumed that any of the 25 cards is allowed to be selected for this slot. Additional input will narrow this list further.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;As the user types, the cards will be arranged by categories that match against the query string. It will use the user’s input to search across multiple categories, such as name, type, and cost. A user can chain up to two comma-separated queries to further narrow down their search.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The current slot will store the user’s queries and upon returning to Home, the next time you click “Generate Card Set”, it will following the filtering criteria for each slot they have edited. Alternately, cards may be directly clicked on in the slot view to guarantee that slot will only generate that card. The same can be done if you click on one of the “Matched Filters” shown just below the input form.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;inspiration&quot;&gt;Inspiration&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Looking at other randomizer apps, I liked the range of features they offered, but found their interface a bit cumbersome. I wanted to make something that made use of modern search functionality. Specifically, I was inspired by Ubuntu’s Unity search and Atom’s Fuzzy Search.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;When you search for something in Ubuntu, it doesn’t just search for files by name - it simultaneously runs several parallel searches across multiple categories. For Atom’s fuzzy search, files within a project could be located just by typing in a couple of letters, without requiring the whole word (such as typing “pc” to get “post_controller.rb”). I wanted to incorporate these elements into a text-based interface to create a simple and clean user interface.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;the-process&quot;&gt;The Process&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;My first priority was to create a searchable database of cards. After getting a simple name and cost search working, I implemented AJAX functionality to add livesearch responsiveness to the search form. It took some research, but I was ultimately able to convert some reference code I found into what I needed.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I then moved on to “multi-category searches”. A key thing I wanted to include was the ability to search across many types of categories, not just the obvious ones. I looked at the &lt;a href=&quot;http://wiki.dominionstrategy.com/index.php/Main_Page&quot;&gt;Dominion Strategy Wiki&lt;/a&gt; to see the terms pro users used to categorize and describe various types of cards. I used these to create the various categories my search function would search against.&lt;/em&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Card&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;name: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Militia&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;ss&quot;&gt;image_url: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http://wiki.dominionstrategy.com/images/thumb/a/a0/Militia.jpg/200px-Militia.jpg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;ss&quot;&gt;cost: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;ss&quot;&gt;types: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Action, Attack&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;ss&quot;&gt;category: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Handsize Attack&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;ss&quot;&gt;expansion: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Base&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;ss&quot;&gt;strategy: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;ss&quot;&gt;terminality: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Terminal Silver&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;no&quot;&gt;Card&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;name: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Moneylender&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;ss&quot;&gt;image_url: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http://wiki.dominionstrategy.com/images/thumb/7/70/Moneylender.jpg/200px-Moneylender.jpg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;ss&quot;&gt;cost: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;ss&quot;&gt;types: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Action&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;ss&quot;&gt;category: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Trasher, Trash-For-Benefit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;ss&quot;&gt;expansion: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Base&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;ss&quot;&gt;strategy: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Trashing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;ss&quot;&gt;terminality: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Terminal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;As a user types their query, cards would display below under the categories that match the user’s input. Thus if someone typed ‘v’, they would get a result like this:&lt;/em&gt;&lt;/p&gt;

&lt;!-- REVIEW tweak this. Change to a lightbox? https://github.com/appfoundry/jekyll-lightbox --&gt;
&lt;p&gt;&lt;img src=&quot;http://127.0.0.1:4000//assets/img/multi-category-results.png&quot; class=&quot;example-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The top three would match by name (containing a v), the middle by type (victory), and the bottom by category (village-type cards). I realized, however, that it wasn’t entirely clear which categories were being matched, as that information was hidden from the user. As such, I built a text result system off of the search to display the specific matching terms my search picked up.&lt;/em&gt;&lt;/p&gt;

&lt;!-- ![seeds](/assets/img/seeds-example.png) --&gt;
&lt;p&gt;&lt;img src=&quot;http://127.0.0.1:4000//assets/img/seeds-example.png&quot; class=&quot;example-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;My next stage was to implement a fuzzy search. I wanted users to be able to locate what they want with the minimum number of characters. Specifically, I wanted a user to be able to input a series of queries (such as “v 3”) and use that to compose a filter chain to narrow down search results. This step proved to be the most challenging.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;For my fuzzy search, I wanted the user to be able to filter results by inputting multiple, incomplete queries, which simple chaining of scopes could not do. I initially tried to find existing fuzzy search gems I could use, but none of them were quite what I wanted. I was stumped for a while until during a discussion with my mentor, I came across a very handy function: &lt;code class=&quot;highlighter-rouge&quot;&gt;ActiveRecord.to_sql&lt;/code&gt;.&lt;/em&gt;
&lt;em&gt;With this function I realized I could directly chain sql statements off each other, using &lt;code class=&quot;highlighter-rouge&quot;&gt;grep&lt;/code&gt; to remove the first part of the statement for subsequent queries. The result was this function (comments added for clarity):&lt;/em&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;generate_sql_hash&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slot&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;results_hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;multi_result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;header_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;queries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#Loop through each column (category field type)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;# Checks if an input is numeric, as a LIKE comparison cannot be performed on a number&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;col&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;cost&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_numeric?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;col&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;cost&quot;&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# Use string interpolation to use the column name to get the correct scope to test the query against&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;test_search&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Card&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;_&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;blank?&lt;/span&gt;
              &lt;span class=&quot;c1&quot;&gt;# Prepends are added if a user directly clicks to select a category filter (explained below)&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sql_prepend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;blank?&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;# Uses gsub to remove front of statement to chain with prepend SQL statement&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;sql_without_select_prepend&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;gsub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;SELECT &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;cards&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.* FROM &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;cards&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; WHERE &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

                &lt;span class=&quot;n&quot;&gt;results_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sql_prepend&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; AND &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sql_without_select_prepend&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;# Stores the SQL query string into a hash, which will split the results by columns/categories&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;results_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_sql&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

              &lt;span class=&quot;n&quot;&gt;header_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;second&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;results_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;col_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;test_search&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Card&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;_&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;blank?&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;sql_without_select_prepend&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;gsub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;SELECT &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;cards&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.* FROM &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;cards&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; WHERE &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

              &lt;span class=&quot;n&quot;&gt;multi_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;col_1&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &amp;gt; &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; AND &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sql_without_select_prepend&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;The function works, though it is limited. I was only able to get it to work for two consecutive queries, though I intend to make it unlimited in the future.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;My initial implementation used scopes with “LIKE” queries to get matches with partial queries. This worked well up until I deployed to Heroku. As it turns out, my method was not compatible with PostGres. To get around this, I installed the Arel gem and refactored by scopes to use Arel tables and its &lt;code class=&quot;highlighter-rouge&quot;&gt;.match&lt;/code&gt; function.&lt;/em&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;n&quot;&gt;cards&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Arel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:cards&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Card&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cards&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;%&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;%&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:_types&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Card&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cards&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:types&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;%&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;%&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:_category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Card&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cards&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;%&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;%&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:_cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Card&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cards&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:_expansion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expansion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Card&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cards&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:expansion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;%&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expansion&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;%&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:_strategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Card&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cards&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:strategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;%&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;%&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:_terminality&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;terminality&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Card&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cards&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:terminality&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;%&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;terminality&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;%&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;After this hurdle was cleared, the rest was a matter of creating views for the slots and home page.&lt;/em&gt;&lt;/p&gt;</content><category term="Bloc" /><category term="Rails" /><category term="Capstone" /><category term="Backend" /><summary>Randomizer and Card Database for the card game Dominion.</summary></entry><entry><title>Wikease</title><link href="http://127.0.0.1:4000//wikease/" rel="alternate" type="text/html" title="Wikease" /><published>2016-07-19T00:00:00-04:00</published><updated>2016-07-19T00:00:00-04:00</updated><id>http://127.0.0.1:4000//wikease</id><content type="html" xml:base="http://127.0.0.1:4000//wikease/">&lt;h1 id=&quot;wikis-made-easy&quot;&gt;Wikis Made Easy&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Wikease is a Rails app that emulates many of the key features of Wikipedia. Users can create private or public wikis, purchase paid upgrades for their account, and assign collaborators to the wikis they own. This project introduced several key gems to facilitate advanced user authentication and online order processing.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;tools&quot;&gt;Tools&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://rubyonrails.org/&quot;&gt;Rails&lt;/a&gt;, &lt;a href=&quot;http://rspec.info/&quot;&gt;Rspec&lt;/a&gt;, &lt;a href=&quot;https://github.com/plataformatec/devise&quot;&gt;Devise&lt;/a&gt;, &lt;a href=&quot;https://github.com/elabs/pundit&quot;&gt;Pundit&lt;/a&gt;, &lt;a href=&quot;https://stripe.com/&quot;&gt;Stripe&lt;/a&gt;, &lt;a href=&quot;https://github.com/vmg/redcarpet&quot;&gt;Redcarpet&lt;/a&gt;, &lt;a href=&quot;https://github.com/stympy/faker&quot;&gt;Faker&lt;/a&gt;, &lt;a href=&quot;http://getbootstrap.com/&quot;&gt;Bootstrap&lt;/a&gt;, &lt;a href=&quot;https://atom.io/&quot;&gt;Atom&lt;/a&gt;, &lt;a href=&quot;http://www.ubuntu.com/&quot;&gt;Ubuntu&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;breakdown&quot;&gt;Breakdown&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;The &lt;a href=&quot;https://github.com/plataformatec/devise&quot;&gt;Devise&lt;/a&gt; gem is used for user authentication, with built-in email verification and input validation. It is used alongside &lt;a href=&quot;https://github.com/elabs/pundit&quot;&gt;Pundit&lt;/a&gt; to define member privilege levels (aka roles), namely member, premium member, and admin. Through these roles, premium or admin users are able to create private wikis that are only viewable to their owner or collaborators. Standard users may upgrade to premium users as a paid service facilitated through &lt;a href=&quot;https://stripe.com/&quot;&gt;Stripe&lt;/a&gt;. For wiki authors, &lt;a href=&quot;https://github.com/vmg/redcarpet&quot;&gt;Redcarpet&lt;/a&gt; allows users to use &lt;a href=&quot;http://whatismarkdown.com/&quot;&gt;Markdown&lt;/a&gt; for formatting their page content.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;working-together&quot;&gt;Working Together&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;The main challenge I encountered here was grappling with ActiveRecord associations. Since this was the first time I was working with them without “training wheels,” I continued to struggle figuring out how best to organize my associations between Users, Wikis, and Collaborations.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;My initial thinking was that users would need a reference to their collaborators, so my early attempts involved adding this to my User model:&lt;/em&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:collaborators&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;class_name: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;User&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;source: :user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;through: :collaborations&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;As it turns out, this was unnecessary. While it intuitively makes sense for a user to want to know about their collaborators, this isn’t how &lt;code class=&quot;highlighter-rouge&quot;&gt;has_many :through&lt;/code&gt; relationships work. The &lt;code class=&quot;highlighter-rouge&quot;&gt;:through&lt;/code&gt; model is strictly used to describe the connection between two models in contexts where a conventional &lt;code class=&quot;highlighter-rouge&quot;&gt;:belongs_to&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;:has_many&lt;/code&gt; relationship wouldn’t make sense. In this case, a wiki does belong to a user, but not the other way around, or is a wiki exclusively owned by a single user in the context of a collaboration. Thus the &lt;code class=&quot;highlighter-rouge&quot;&gt;Collaboration&lt;/code&gt; model describes the&lt;/em&gt; &lt;strong&gt;&lt;em&gt;activity&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;the two other models are engaged in together, not a relationship in the direct sense.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thus the challenge I encountered came down to confusing the colloquial implications of a &lt;code class=&quot;highlighter-rouge&quot;&gt;Collaboration&lt;/code&gt; with its functional application in Rails. I see now the importance of carefully naming such models to avoid this kind of confusion.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;This project marked a second time when I stumbled in making sense of complex ActiveRecord associations, but in reviewing it and working with my mentor I am able to paint a clearer picture in my mind of how to work with them. Particularly with Rails, some of the challenge comes in suspending assumptions around a word or concept in favor of accepting how a particular language or framework does things. For better or worse, there are times when familiar concepts like “associations” or “scopes” are used to describe very different things than what you expect.&lt;/em&gt;&lt;/p&gt;</content><category term="Bloc" /><category term="Rails" /><category term="Backend" /><summary>A wiki site that allows users to author private and public wikis, as well as assign collaborators onto wikis they own.</summary></entry><entry><title>Webmarks</title><link href="http://127.0.0.1:4000//webmarks/" rel="alternate" type="text/html" title="Webmarks" /><published>2016-07-19T00:00:00-04:00</published><updated>2016-07-19T00:00:00-04:00</updated><id>http://127.0.0.1:4000//webmarks</id><content type="html" xml:base="http://127.0.0.1:4000//webmarks/">&lt;!-- TODO missing authorization for creating bookmarks (should not allow if not logged in) --&gt;
&lt;!-- TODO missing input validation/parsing with/without &#39;www&#39;--&gt;
&lt;!-- TODO refactor to get favicon http://jsfiddle.net/aX8T4/ --&gt;

&lt;h1 id=&quot;share-and-save-your-bookmarks&quot;&gt;Share and Save Your Bookmarks!&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Webmarks is an app for saving and sharing bookmarks. Users can organize their bookmarks into topics, “like” other user’s bookmarks, and add new bookmarks to their list via email.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;tools&quot;&gt;Tools&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://rubyonrails.org/&quot;&gt;Rails&lt;/a&gt;, &lt;a href=&quot;http://rspec.info/&quot;&gt;Rspec&lt;/a&gt;, &lt;a href=&quot;https://github.com/plataformatec/devise&quot;&gt;Devise&lt;/a&gt;, &lt;a href=&quot;https://github.com/elabs/pundit&quot;&gt;Pundit&lt;/a&gt;, &lt;a href=&quot;http://embed.ly/&quot;&gt;Embedly&lt;/a&gt;, &lt;a href=&quot;https://github.com/jorgemanrubia/mailgun_rails&quot;&gt;Mailgun&lt;/a&gt;, &lt;a href=&quot;https://github.com/stympy/faker&quot;&gt;Faker&lt;/a&gt;, &lt;a href=&quot;http://getbootstrap.com/&quot;&gt;Bootstrap&lt;/a&gt;, &lt;a href=&quot;https://atom.io/&quot;&gt;Atom&lt;/a&gt;, &lt;a href=&quot;http://www.ubuntu.com/&quot;&gt;Ubuntu&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;the-specs&quot;&gt;The Specs&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Webmarks provides an interface for users to save bookmarks into Topics, as well as view the bookmarks of other users and “like” them. Users can also send emails to the app to have them added to their Bookmark list.&lt;/em&gt;
&lt;em&gt;&lt;a href=&quot;https://github.com/plataformatec/devise&quot;&gt;Devise&lt;/a&gt; is used to handle authentication, with &lt;a href=&quot;https://github.com/elabs/pundit&quot;&gt;Pundit&lt;/a&gt; used to ensure other users cannot add or delete the bookmarks or topics of other users. &lt;a href=&quot;https://github.com/jorgemanrubia/mailgun_rails&quot;&gt;Mailgun&lt;/a&gt; and an associated Mailer are used to receive and parse out incoming emails. Emails are sent to a Mailgun tester email, and are parsed to use the subject line as the topic and the body as the bookmark url. If the email matches an existing user, the bookmark will appear on that user’s profile.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;challenges&quot;&gt;Challenges&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;While confusing at first, configuring Mailgun was relatively simple. Where I encountered some resistance was in generating thumbnails for the bookmarks. One of my personal goals was with this project was to add a little more visual flare to this project and acclimate myself more to CSS styling.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I ended up settling on using Embedly to handle auto-generation of bookmark thumbnails. My initial thought was to have it show a snapshot of the page, but when I realized that would be too tricky. I tried to find a way to pull the favicon from a page, but I was unsuccessful in finding a way to do that. I settled on having Emedly pull the first image it finds from the page, which is usually the logo. Other times, however, it ends up being a random image.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;overall&quot;&gt;Overall&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;This was a fairly straightforward project that nonetheless taught me a few new tricks with email integration. I spent more time on styling on this one, which helped me get more confident with CSS positioning.&lt;/em&gt;&lt;/p&gt;</content><category term="Bloc" /><category term="Rails" /><category term="Backend" /><summary>A bookmark saving and sharing app with email integration.</summary></entry><entry><title>Terrachanics</title><link href="http://127.0.0.1:4000//Terrachanics/" rel="alternate" type="text/html" title="Terrachanics" /><published>2016-07-17T00:00:00-04:00</published><updated>2016-07-17T00:00:00-04:00</updated><id>http://127.0.0.1:4000//Terrachanics</id><content type="html" xml:base="http://127.0.0.1:4000//Terrachanics/">&lt;h1 id=&quot;powered-up&quot;&gt;Powered Up&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Terrachanics is a mobile puzzle game designed as a recruitment tool for the U.S. Department of Energy (DOE). It is designed to contextualize cutting edge energy technologies alongside mind-bending puzzles to attract STEM field students into careers with the DOE.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The game was built by a team of 32 volunteers from around the country. I served as the Lead Designer and Producer (aka Project Manager) for the duration of development, as well as the Programming Lead going into our second year.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;the-challenge&quot;&gt;The Challenge&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Terrachanics was the largest and most ambitious project I had ever done. What began as an internship opportunity grew into what felt like running my own business. I was given unprecedented creative freedom and trust from the DOE, without any budget or time restrictions to speak of. With such a generous and rare opportunity in front of me, I wanted to use it to build the team and the game I’ve always wanted.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I learned many lessons over the two and a half years I spent working on the game. I wrote about my experience in detail in my &lt;a href=&quot;http://www.gamasutra.com/blogs/GlenCooney/20140910/225367/Tales_of_Terrachanics_Part_1.php&quot;&gt;Tales of Terrachanics blog series&lt;/a&gt; for the game industry website Gamasutra. Here I will give a brief summary of the series, and highlight some of the main lessons I got out of it.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.gamasutra.com/blogs/GlenCooney/20140910/225367/Tales_of_Terrachanics_Part_1.php&quot;&gt;Part 1&lt;/a&gt; &lt;em&gt;discusses the foundational goals I had for our game and team culture, as well as the personal struggles I had dealt with that shaped my motives going into the project.&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.gamasutra.com/blogs/GlenCooney/20140912/225551/Tales_of_Terrachanics_Part_2.php&quot;&gt;Part 2&lt;/a&gt; &lt;em&gt;describes the hurdles  we encountered during the production process and the challenge of balance forgiving, nurturing leadership with holding people to a professional standard.&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.gamasutra.com/blogs/GlenCooney/20150227/229534/Tales_of_Terrachanics_Part_3.php&quot;&gt;Part 3&lt;/a&gt; &lt;em&gt;talks about the design decisions made to ease players into our abstract mechanics. Much of this involved iterating on our interface and tutorial design, as well as adjusting our theming to make mechanics more intuitive for players.&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.gamasutra.com/blogs/GlenCooney/20150428/238280/Tales_of_Terrachanics_Part_4.php&quot;&gt;Part 4&lt;/a&gt; &lt;em&gt;features my reflections on how the project turned out, what I learned about leadership, and how my experience changed by outlook on life. In a nutshell, I developed a much deeper understanding of the psychology of human interaction, and how to better motivate those around me.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;the-lessons&quot;&gt;The Lessons&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Being heavily involved in the creative, technical, and managerial aspects of the project, there was a dearth of great lessons gleaned from the experience.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-creative-side&quot;&gt;The Creative Side&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;In terms of design, I was most heavily involved in design of our mechanics. The most valuable lessons I found, however, came in the areas of interface design and critique.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;interface-design&quot;&gt;Interface Design&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Given the abstract nature of the gameplay, we had to get creative on how to present the mechanics to maximize player comprehension. We decided early on not to lean on tutorials too heavily, and instead design the game to be intuitive enough that its concepts could be easily grasped and retained by our players. We accomplished this through careful theming and aesthetic choices.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The effect of theming and presentation was most present in our core mechanic, linking, where buildings link together based on the transfer of “resources” from one building to another. We took several passes on designing the icons to ensure they were both readable and reactive to player activity.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Essentially, by creating interface elements that responded to player actions, it helped to reinforce the more esoteric aspects of the game passively and non-verbally. This way players only required an initial written explanation, and would be non-intrusively reminded each time they interacted with the mechanic.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;creative-leadership&quot;&gt;Creative Leadership&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;I have come to realize that there are special challenges that come with creative leadership. Compared to technical contexts, there is much more subjectivity and emotional influence involved in maintaining quality work out of your team.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Because creative work involves creating novel ideas that no one has seen before, it becomes imperative to create shared aesthetic sensibilities. Accomplishing this involves not just verbal and written communication, but reference images, examples of similar games, music, etc. In short you must use a plethora of media sources to create a clear picture in the minds of the team.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This is especially true when it comes to critique. When offering an opinion on an asset, you must not only be able to clearly articulate your thoughts, but use it to contribute to a unified aesthetic framework. It is likewise important that each comment is honest yet supportive, inspiring artists to build upon their talent, not slow down through anxious friction.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;In short, deep communication is required to ensure a viable and productive creative team.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-technical-side&quot;&gt;The Technical Side&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;By far the most enjoyable part of the development process was working with code. While my direct involvement was limited to our prototype, I did end up working closely with the programming team to develop our weekly priorities and tasks and how best to tackle technical issues.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-importance-of-prototyping&quot;&gt;The Importance of Prototyping&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;A lesson I learned too late was the importance of having a working demo of your product early. While I initially leaned on our team of 6 programmers to give us a playable build, it turned out they did not have a firm grasp on our concept even 6 months into development.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;As the designer responsible for our mechanics, it seemed fitting that I would create the prototype myself. Doing so allowed me to produce an interactive blueprint for our programmers, as well as an experimental sandbox for the design team to test our ideas.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;By making the prototype a part of the conceptual phase, it gives us a live representation get our iteration cycle up and running early and quickly. I was able to identify edge cases and details early that allowed us to anticipate potential challenges later down the road, and thus account for them in our project plan.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-management-side&quot;&gt;The Management Side&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;While I had taken leadership positions in student projects in the past, the scope and scale of the project and our team tested my leadership skills to its limits. While I felt my leadership style worked fine with the programming team, I was less successful in motivating and directing our creative teams. In my desire to improve these skills, I came to learn some excellent lessons in inspiring others and mitigating destructive conflict.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;in-theory&quot;&gt;In Theory…&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;I had lofty ambitions for our team culture. I was inspired by a behind-the-scenes DVD I watched from Blizzard Entertainment, detailing the culture of their studio. They believed in having every team member, every employee, have a say in the design of their game. They believed in leveraging diverse opinions and allowing everyone to make a mark on their product to create buy-in and a sense of collective ownership. The also believed in taking their time to perfect every product, ensuring the best possible quality for the end product.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Secondly, I wanted to give young developers and students a chance to prove their skills on the job, rather than be like so many companies and demand proven experience up front. I believed that given the right environment it would allow people to spread their wings and prove their worth. I was forgiving of mistakes and delays, believing that this would maintain higher morale.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;in-practice&quot;&gt;In Practice…&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;It is indeed possible to create a team culture as Blizzard has done. Such cultures are discussed in even greater detail in such books as &lt;a href=&quot;https://www.youtube.com/watch?v=ImmtTHYU5GQ&quot;&gt;Collective Intelligence&lt;/a&gt;, by Linda Hill et al. Yet it requires a certain finesse and mastery of inspiring dialog and discovery on the team beyond the scope of my modest leadership background.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;It is every bit as important to design your team as it is to design the product. I wanted to take a rag-tag team, but them into the “perfect” work environment, and witness what they came up with. The team I had, however, was largely composed of novices who lacked the confidence and drive to be as opinionated and passionate as I anticipated.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Giving people the benefit of the doubt and prove their skills on the job is a great sentiment, but can be costly in practice. I made the mistake of trying to be hands-off, holding back my opinions and tendency to micromanage everything. In spite of my intentions, this only created a vacuum that left my team without a clear vision of our goals and how they fit into them.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;While I feel there is much more I have to learn about leadership, in my pursuit of learning more I did stumble across some excellent insights that have changed my views of the world.&lt;/em&gt; Collective Intelligence &lt;em&gt;not only touches on how to seed vibrant and innovative cultures, but describes an approach where conflict and diversity is embraced and leverage.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The mantra “strong opinions loosely held”, sums up this sentiment perfectly. It injects emotion into the conversation to fire people up, while maintaining humility and curiosity to seek better alternatives to ones own ideas. I think this is a notion that could radically improve our workplaces and our world.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;epilogue&quot;&gt;Epilogue&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;As of this writing, two years after completing the game, the Department of Energy has yet to officially launch our game. Given the time, money, and effort put into the project by myself and the team, this was obviously devastating news. In spite of repeated assurances to the contrary, it us unlikely the game will see the wide release or marketing push the DOE initially promised us.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;As such, myself and my team have had to point our career objectives elsewhere. For myself, I have decided to concentrate on improving my programming skills, particularly Web Development. I have come to realize that my core interests lie in building and understanding systems, and I have felt the most engaged when building games from the ground up.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I intend to continue to make games as side projects alongside my Web Development work. Whether I rejoin the game industry some day in the future remains to be seen.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;additional-links&quot;&gt;Additional Links&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.google.com/document/d/1w_SQeENo3YsBN5yfg_S6y79W1_YFGHETuZ4V-QAlwZw/edit?usp=sharing&quot;&gt;Game Design Document&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/transplanar/Terrachanics_Flash-Prototype&quot;&gt;Flash Prototype Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Unity" /><category term="Game Dev" /><summary>A mobile game app for the U.S. Department of Energy</summary></entry></feed>
